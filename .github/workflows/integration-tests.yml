name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
        seatunnel-version: ["2.3.11"]
        airflow-version: ["2.3.0", "2.4.0", "2.5.0"]
      fail-fast: false

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install apache-airflow==${{ matrix.airflow-version }}
        pip install -r tests/integration/requirements.txt
        pip install -e .

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start SeaTunnel services
      run: |
        cd tests/integration
        export SEATUNNEL_VERSION=${{ matrix.seatunnel-version }}
        docker-compose up -d
        
        # Wait for SeaTunnel to be ready
        echo "Waiting for SeaTunnel to start..."
        timeout 300 bash -c 'until curl -f http://localhost:8083/health; do sleep 5; done'
        echo "SeaTunnel is ready!"

    - name: Run integration tests
      run: |
        cd tests/integration
        export SKIP_DOCKER_SETUP=true
        pytest -v -m integration --cov=airflow_seatunnel_provider --cov-report=xml --cov-report=term
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9' && matrix.airflow-version == '2.5.0'
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/integration/coverage.xml
        flags: integration
        name: integration-tests
        fail_ci_if_error: false

    - name: Collect Docker logs on failure
      if: failure()
      run: |
        cd tests/integration
        echo "=== SeaTunnel logs ==="
        docker-compose logs seatunnel
        echo "=== Docker containers ==="
        docker ps -a

    - name: Clean up
      if: always()
      run: |
        cd tests/integration
        docker-compose down -v

  test-examples:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install apache-airflow
        pip install -e .

    - name: Validate example DAGs
      run: |
        export AIRFLOW_HOME=${{ github.workspace }}/airflow_home
        mkdir -p $AIRFLOW_HOME/dags
        cp examples/*.py $AIRFLOW_HOME/dags/
        
        # Initialize Airflow database
        airflow db init
        
        # Test DAG parsing
        python -c "
        import sys
        sys.path.insert(0, 'examples')
        
        # Test importing example DAGs
        try:
            import seatunnel_example_dag
            import seatunnel_sensor_example_dag
            print('✓ All example DAGs imported successfully')
        except Exception as e:
            print(f'✗ Failed to import example DAGs: {e}')
            sys.exit(1)
        "
        
        # Validate DAGs with Airflow
        airflow dags list
        airflow tasks list seatunnel_example
        airflow tasks list seatunnel_sensor_example

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'